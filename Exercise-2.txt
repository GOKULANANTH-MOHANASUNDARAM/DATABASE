SELECT * FROM EMPLOYEE;

-- Write a SQL query to remove the details of an employee whose first name ends in ‘even’

SELECT EMPLOYEE_ID ,FIRST_NAME FROM EMPLOYEE WHERE FIRST_NAME LIKE '%x'; -- 100, 108

DELETE FROM EMPLOYEE WHERE FIRST_NAME LIKE '%x';

-- Write a query in SQL to show the three minimum values of the salary from the table.

SELECT EMPLOYEE_ID, FIRST_NAME, SALARY FROM EMPLOYEE ORDER BY SALARY LIMIT 3;

-- Write a SQL query to copy the details of this table into a new table with table name as Employee table and to delete the records in employees table

CREATE TABLE EMPLOYEE AS SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEE;

TRUNCATE TABLE EMPLOYEES;

-- Write a SQL query to remove the column Age from the table

ALTER TABLE EMPLOYEE DROP COLUMN AGE;

-- Obtain the list of employees (their full name, email, hire_year) where they have joined the firm before 2000

SELECT CONCAT(FIRST_NAME,' ', LAST_NAME) AS FULL_NAME, EMAIL, CAST(YEAR(HIRE_DATE) AS VARCHAR(5)) AS HIRE_YEAR FROM EMPLOYEE WHERE YEAR(HIRE_DATE) < 2000;

-- Fetch the employee_id and job_id of those employees whose start year lies in the range of 1990 and 1999

SELECT EMPLOYEE_ID, JOB_ID FROM EMPLOYEE WHERE YEAR(HIRE_DATE) BETWEEN 1990 AND 1999;

-- Find the first occurrence of the letter 'A' in each employees Email ID, Return the employee_id, email id and the letter position

SELECT EMPLOYEE_ID, EMAIL, CHARINDEX('A', EMAIL, 1) AS LETTER_POSITION FROM EMPLOYEE;

-- Fetch the list of employees(Employee_id, full name, email) whose full name holds characters less than 12

SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME,' ', LAST_NAME) AS FULL_NAME, EMAIL,LENGTH(FULL_NAME) FROM EMPLOYEE HAVING LEN(FULL_NAME) < 12;

-- Create a unique string by hyphenating the first name, last name, and email of the employees to obtain a new field named UNQ_ID, Return the employee_id, and their corresponding UNQ_ID

SELECT EMPLOYEE_ID, first_name, CONCAT(FIRST_NAME, '-', LAST_NAME, '-', EMAIL) as UNQ_ID FROM EMPLOYEE;

-- Write a SQL query to update the size of email column to 30

ALTER TABLE EMPLOYEE MODIFY EMAIL VARCHAR(45);
describe table employee;
SELECT EMAIL FROM EMPLOYEE;

-- Write a SQL query to change the location of Diana to London

SELECT * FROM LOCATIONS;

UPDATE LOCATIONS SET CITY = 'London' FROM DEPARTMENTS JOIN EMPLOYEE ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEE.DEPARTMENT_ID
WHERE DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID AND EMPLOYEE.FIRST_NAME = 'Diana';

-- Fetch all employees with their first name , email , phone (without extension part) and extension (just the extension)
-- Info : this mean you need to separate phone into 2 parts
-- eg: 123.123.1234.12345 => 123.123.1234 and 12345 . first half in phone column and second half in extension column

SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME), EMAIL, IFF (ARRAY_SIZE (SPLIT(PHONE_NUMBER, '.'))>3,
ARRAY_TO_STRING (ARRAY_SLICE (SPLIT (PHONE_NUMBER, '.'), 0,3), '.'),
ARRAY_TO_STRING (ARRAY_SLICE (SPLIT (PHONE_NUMBER, '.'), 0,2), '.')) AS PHONE,
SPLIT_PART (PHONE_NUMBER, '.', -1) AS EXTENSION FROM EMPLOYEE;

-- Write a SQL query to find the employee with second and third maximum salary with and without using top/limit keyword

SELECT EMP.EMPLOYEE_ID, EMP.FIRST_NAME, EMP.SALARY 
FROM (SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) AS MAX_SALARY FROM EMPLOYEE) EMP
WHERE EMP.MAX_SALARY IN (2, 3);

-- Fetch all details of top 3 highly paid employees who are in department Shipping and IT

SELECT TOP 3  * FROM EMPLOYEE WHERE DEPARTMENT_ID IN (50, 60) ORDER BY SALARY DESC;

(SELECT TOP 3 * FROM EMPLOYEE WHERE DEPARTMENT_ID IN (50) ORDER BY SALARY DESC)
UNION
(SELECT TOP 3 * FROM EMPLOYEE WHERE DEPARTMENT_ID IN (60) ORDER BY SALARY DESC);

SELECT TOP 3 * FROM EMPLOYEE WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME IN ('Shipping','IT')) ORDER BY SALARY DESC;

-- Display employee id and the positions(jobs) held by that employee (including the current position)

SELECT EMPLOYEE.EMPLOYEE_ID, JOBS.JOB_TITLE FROM EMPLOYEE, JOB_HISTORY, JOBS WHERE EMPLOYEE.EMPLOYEE_ID = JOB_HISTORY.EMPLOYEE_ID AND JOB_HISTORY.JOB_ID = JOBS.JOB_ID
UNION
SELECT EMPLOYEE.EMPLOYEE_ID, JOBS.JOB_TITLE FROM EMPLOYEE, JOBS WHERE EMPLOYEE.JOB_ID = JOBS.JOB_ID
order by employee_id;


-- Display Employee first name and date joined as WeekDay, Month Day, Year
-- Eg :
-- Emp ID Date Joined
--1 Monday, June 21st, 1999

SELECT FIRST_NAME, CONCAT(TO_CHAR(HIRE_DATE, '%A'), ', ', TO_CHAR(HIRE_DATE, 'MMMM'), ' ', DAY(HIRE_DATE),'st, ', YEAR(HIRE_DATE)) AS DATE_JOINED FROM EMPLOYEE;

-- The company holds a new job opening for Data Engineer (DT_ENGG) with a minimum salary of 12,000 and maximum salary of 30,000 . The job position might be removed based on market trends (so, save the changes) . 
-- - Later, update the maximum salary to 40,000 . 
-- - Save the entries as well.
-- - Now, revert back the changes to the initial state, where the salary was 30,000

SELECT * FROM JOBS;
ALTER SESSION SET AUTOCOMMIT = FALSE;
START TRANSACTION;
INSERT INTO JOBS VALUES ('DT_ENGG', 'DATA ENGINEER', 12000, 30000);
COMMIT;
SELECT * FROM JOBS;
UPDATE JOBS SET MAX_SALARY = 40000 WHERE JOB_ID = 'DT_ENGG';
SELECT * FROM JOBS;
ROLLBACK;
SELECT * FROM JOBS;
DELETE FROM JOBS WHERE JOB_ID = 'DT_ENGG';

-- Find the average salary of all the employees who got hired after 8th January 1996 but before 1st January 2000 and round the result to 3 decimals

SELECT ROUND(AVG(SALARY), 3) AS AVERAGE_SALARY FROM EMPLOYEE WHERE HIRE_DATE BETWEEN '1996-01-09' AND '1999-12-31';

-- Display Australia, Asia, Antarctica, Europe along with the regions in the region table (Note: Do not insert data into the table)
-- A. Display all the regions
-- B. Display all the unique regions

SELECT REGION_NAME FROM REGIONS UNION ALL SELECT('Australia') UNION ALL SELECT('Antartica') UNION ALL SELECT('Asia') UNION ALL SELECT('Europe');

SELECT REGION_NAME FROM REGIONS UNION SELECT('Australia') UNION SELECT('Antartica') UNION SELECT('Asia') UNION SELECT('Europe');

-- Write a SQL query to remove the employees table from the database

DROP TABLE EMPLOYEES;